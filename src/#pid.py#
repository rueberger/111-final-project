from utils.sensors import Sensors
from utils.dac import set_voltage
from time import sleep, time
import numpy as np

sense = Sensors()
sq_wave = np.array([0] * 1000 + [.5] * 9000 + [0] * 1000)
tr_wave = np.array((list(np.linspace(0, 1, 100)) + list(np.linspace(1, 0, 100))) * 100)


def pid_loop(c_p=1, c_d=0.2, c_i=3, profile=None):
    """
    Default profile is a square wave
    """
    profile = profile or sq_wave
    t = []
    x_hist = []
    for idx, x_prof in enumerate(profile[1:]):
        x_curr, v_curr, d_t, curr_time = sense.measure()
        c_t = time()
        t.append(curr_time)
        x_hist.append(x_curr)
        prop = x_prof - x_curr
        # hypothetically this should work - trying to deal with off by one error
        # in first x_position
        v_prof = (x_prof - profile[idx]) / d_t
        deriv = v_prof - v_curr
        # can optimize this - don't need to integrate from 0 each time
        integral = np.trapz(profile[:idx + 1] - x_hist, x=t)
        response = c_p * prop + c_d * deriv + c_i * integral
        set_voltage(response)
    return profile, x_hist

